#
# CosmoPipe Pipeline Configuration File 
# Pipelines should be configured as: 
#
# [name]: .[submode1] [standalone1] [standalone2] .[submode2] ...
# .[submode1]: [standalone3] [standalone4] .[submode3] ...
# 
# There are 3 special functions: 
# - @[name] sets the datablock entry [name] to the datahead 
# - ![name] sets the current datahead to the block item [name]
# - %[name1]-[name2] changes the datablock entry [name1] to [name2]
# - +[name]=[value] assigns variable [name] the [value] in the block variables
#

pipetest: 
  @sims_main_comb     #Copy the main catalogues to the DATAHEAD
  .column_reduction 

#Fiducial K1000 analysis pipeline: AsgariRerun {{{
AsgariRerun: 
  .add_datasets         #Add all of the relevant data to the datablock 
  .testing              ### FOR TESTING ONLY ###
  .prepare_catalogues   #Prepare the input catalogues for science 
  .fiducial_nz_calc     #Compute Nz and Gold classes using fiducial setup 
  .fiducial_dz_calib    #Compute the dz priors using the fiducial setup 
  %nz_data-nz           #Use the data Nz from here on, when needed
  .fiducial_m_calib     #Compute the m priors using the fiducial setup 
  .fiducial_settings    #Use fiducial settings for data vector, chain, etc
  .prepare_xipm         #Prepare the catalogues for correlation functions 
  .run_xipm             #Compute xipm using treecorr
  .prepare_cosebis      #Prepare the cosebis data-vectors and covariance 
  .prepare_chain        #Prepare the data products for running cosmosis 
  run_chain             #Run the chain 
  .postprocess_chain    #Produce nice diagnostic figures and tables 
#}}}
 
.add_datasets: # Add all catalogues to the datablock {{{
  add_main             #Add the main catalogues to the data block 
  add_specz            #Add the specz calibration catalogue to the data block 
  add_sims_main        #Add the simulated main catalogues (for dz computation) 
  add_sims_specz       #Add the simulated calibration catalogues (for dz computation)
#}}}

.prepare_catalogues: # Prepare all catalogues for science {{{
  .prepare_main        #Prepare the main survey catalogues 
  .prepare_specz       #Prepare the specz calibration catalogues 
  .prepare_sims        #Prepare the simulated catalogues 

.prepare_main: # Prepare main survey catalogues {{{
  @main_cats          #Copy the main catalogues to the DATAHEAD
  %main_cats-main_raw #rename the original cats block to main_raw
  .ensure_ldac        #Ensure that the main catalogues are LDAC compatible 
  .gaapflag_selection #Select the sources with GAAPFLAG 0 values
  .column_reduction   #Keep only columns that we need for CosmoPipe
  .weight_recal       #Run the weight recalibration, to remove PSF leakage
  !main_cats          #Copy these catalogues back to the main_cats 
  tomography          #Apply tomography to the main catalogues (still in DATAHEAD)
  !main_cats_tomo     #Save patchwise tomographic catalogues to main_cats_tomo 
  @main_cats          #Combine the patches into a single catalogue
  combine_patch       # ^^
  !main_all           #Construct tomographic all-patch catalogues
  tomography          # ^^
  !main_all_tomo      #Save tomographic all-patch catalogues to main_all_tomo 
#}}}

.column_reduction: #Reduce columns contained in the catalogues {{{
  +KEEPSTRINGS="^R$ MAG_GAAP_ MAG_AUTO ALPHA_ DELTA_ RAJ2000 DECJ2000 RA_ DEC_ e1 e2 weight scalelength SNR SNratio variance g1 g2 Z_B redshift z_ zspec SeqNr FIELD_POS"  #(Partial-)Matching columns are kept, case-insensitive  
  ldackeepcols        #Remove non-matching columns 
#}}}

.column_reduction_fits: #Reduce columns contained in the catalogues {{{
  +KEEPSTRINGS="^R$ MAG_GAAP_ MAG_AUTO ALPHA_ DELTA_ RAJ2000 DECJ2000 RA_ DEC_ e1 e2 weight scalelength SNR SNratio variance g1 g2 Z_B redshift z_ zspec SeqNr FIELD_POS"  #(Partial-)Matching columns are kept, case-insensitive  
  fitskeepcols        #Remove non-matching columns 
#}}}

.gaapflag_selection: #Select sources with valid GAAPFlag {{{
  +FILTERCOND='FLAG_GAAP_u+FLAG_GAAP_g+FLAG_GAAP_r+FLAG_GAAP_i+FLAG_GAAP_Z+FLAG_GAAP_Y+FLAG_GAAP_J+FLAG_GAAP_H+FLAG_GAAP_Ks==0'  #Set the filter condition 
  ldacfilter                      #Filter the catalogues 
#}}}

.prepare_specz: # Prepare calibration catalogues {{{
  @specz_cat          #Copy the specz catalogue to the DATAHEAD 
  use_adapt_mag       #Convert the magnitudes to adapted magnitudes 
  .ensure_ldac        #Ensure that the calibration catalogue is LDAC compatible
  .gaapflag_selection #Select the sources with GAAPFLAG 0 values
  .column_reduction   #Keep only columns that we need for CosmoPipe
  !specz_adapt        #Save the specz adapt catalogue to data block 
  tomography          #Apply tomography to calibration catalogue
  !specz_adapt_tomo   #Save specz adapt tomographic catalogue to data block 
#}}}

.prepare_sims: # Prepare simulated catalogues {{{ 
  @sims_specz                #Start with the simulated specz catalogue(s)
  %sims_specz-sims_specz_raw #Rename original catalogues to sims_specz_raw
  .ensure_ldac               #Ensure the specz catalogues are ldac compatible 
  .gaapflag_selection        #Select the sources with GAAPFLAG 0 values
  .column_reduction          #Keep only columns that we need for CosmoPipe
  !sims_specz                #Save the ldac compatible tables to sims_specz
  tomography                 #Tomographically bin the specz catalogues 
  !sims_specz_tomo           #Save the tomographic specz catalogues to sims_specz_tomo
  @sims_main                 #Move onto the main catalogues
  %sims_main-sims_main_raw   #Rename original catalogues to sims_main_raw
  .column_reduction_fits     #Keep only columns that we need for CosmoPipe
  .ensure_ldac               #Ensure the main catalogues are ldac compatible 
  .lensing_selections        #Apply required lensing selections to the simulations 
  .gaapflag_selection        #Select the sources with GAAPFLAG 0 values
  combine_cats               #Combine the main catalogues into a single catalogue 
  !sims_main_comb            #Save the combined catalogue to sims_main_comb
  .use_simulation_variables  #Use the simulation variable names 
  +WEIGHTNAME=oldweight_LF_r  #The pre-recalibration weight name 
  .weight_recal              #Correct weights for PSF contamination 
  !sims_main                 #Save the ldac compatible tables to sims_main
  tomography                 #Tomographically bin the main catalogues 
  !sims_main_tomo            #Save the tomographic main catalogues to sims_main_tomo
  +CONSTANT_SIMS=@DB:sims_main_tomo@ #Use the sims_main_tomo entries as the constant shear simulations
#}}}

.lensing_selections:  #Apply the lensing selections to the SKiLLS simulations  {{{
  +FILTERCOND='(flag_gaap+flag_binary+flag_asteroid+flag_LF_noWeiCut==0)' 
  ldacfilter          #Filter the catalogue to this subset 
#}}}
  
#}}}

.testing:  #Filter catalogues for testing {{{
  +NITER=100
  @main_cats          #Load the main catalogue(s) 
  .ensure_ldac        #Ensure that the main catalogues are LDAC compatible 
  +FILTERCOND='(RAJ2000<141)\&(RAJ2000>40)' #Select a subset in RA
  ldacfilter          #Filter the catalogue to this subset 
  !main_cats          #Use the subset catalogue from here on 
  @sims_main          #Load the simulated main catalogue(s) 
  .column_reduction_fits   #Keep only columns that we need for CosmoPipe
  .ensure_ldac        #Ensure that the main catalogues are LDAC compatible 
  +FILTERCOND='(RA_input<214)\&(RA_input>211)' #Select a subset in RA
  ldacfilter          #Filter the catalogue to this subset 
  !sims_main          #Use the subset catalogue from here on 
#}}}

.ensure_ldac: # Ensure current DATAHEAD catalogues are LDAC compatible {{{
  convert_to_ldac     #Convert the input file to LDAC (if not already) 
  ldacrentab          #Rename the data extension to OBJECTS (if not already)
#}}}

.weight_recal: # Recalibrate the shape weights to remove PSF leakage {{{
  run_weight_recal    #Run the weight recalibration 
  +WEIGHTNAME=AlphaRecalC_weight
#}}}

.shape_recal: # Recalibrate the shapes to remove PSF leakage {{{
  combine_tomocats       #Re-merge the tomographic catalogues 
  run_shape_recal    #Run the weight recalibration 
  tomography         #Split out bins again 
  +E1NAME=AlphaRecalD2_e1             #Use the recalibrated shapes
  +E2NAME=AlphaRecalD2_e2             #Use the recalibrated shapes
#}}}

.fiducial_nz_calc: # Perform the fiducial Nz construction {{{
  .specz_som            #Compute a SOM using the calibration catalogue 
  @specz_adapt_tomo     #Assign the tomographic specz sample as the calibrators 
  !som_weight_training  # ^^
  @main_all_tomo        #Assign the tomographic shear sample as the targets
  !som_weight_reference # ^^
  @specz_som            #Use the SOM trained on the calibration sample
  .compute_nz           #Compute Nz from the SOM (in DATAHEAD) & main+specz data (in reference/training blocks)
  %som_weight_refr_gold-main_all_tomo_gold       #Save the main sample outputs to main_all_tomo_gold 
  %som_weight_calib_cats-specz_adapt_tomo_gold   #Save the calibration outputs to specz_adapt_tomo_gold 
  %nz_hc_optim-nz_hc_optim_data           #Save the Nz HC optimisation structures to nz_hc_optim_data 
  %nz-nz_data           #Save the Nz to nz_data 

.specz_som: #Construct a SOM from calibration data {{{
  @specz_adapt       #Use the specz calibration sample with adapted magnitudes 
  construct_som      #Construct the SOM 
  !specz_som         #Save the SOM to specz_som 
#}}}

#}}}

.compute_nz: #Compute an Nz given the current SOM & requested catalogues {{{
  compute_nz_weights #Compute the SOM Nz weights 
  construct_nz       #Make the Nz 
  plot_HC_nz         #Make some diagnostic figures 
  merge_goldclass    #Merge the goldclass information back (-> som_weight_refr_gold) 
#}}}

.use_simulation_variables: #Set relevant column names to those from simulated catalogues {{{
  +ZSPECNAME=redshift_input       #spec-z name 
  +ZPHOTNAME=Z_B                  #Photo-z name 
  +WEIGHTNAME=AlphaRecalC_weight  #Weightname 
  +G1NAME=g1_in                   #Input g1 variable name 
  +G2NAME=g2_in                   #Input g2 variable name 
  +E1NAME=e1_LF_r                 #E1 variable name 
  +E2NAME=e2_LF_r                 #E2 variable name 
  +SNRNAME=SNR_LF_r               #Signal-to-noise name 
  +IMAGNAME=i1                    #i-mag variable name 
  +RAWE1NAME=e1_LF_r              #Raw E1 variable name 
  +RAWE2NAME=e2_LF_r              #Raw E2 variable name 
  +SHAPEVARNAME=LS_variance_LF_r  #Shape Variance variable name 
  +PSFE1NAME=psf_e1_LF_r          #PSF E1 variable name 
  +PSFE2NAME=psf_e2_LF_r          #PSF E2 variable name 
  +ADDITIONALFLAGS='--refr.truth' #Compute true biases for dz calculations 
#}}}

.use_data_variables: #Set relevant column names to those from data catalogues {{{
  +ZSPECNAME=z_spec_C             #spec-z name 
  +ZPHOTNAME=Z_B                  #Photo-z name 
  +WEIGHTNAME=AlphaRecalC_weight  #Weightname 
  +E1NAME=autocal_e1              #E1 variable name 
  +E2NAME=autocal_e2              #E2 variable name 
  +SNRNAME=model_SNratio          #Signal-to-noise name 
  +IMAGNAME=i                     #i-mag variable name 
  +ADDITIONALFLAGS=               #Do not compute true biases (because we can't!)
#}}}

.fiducial_dz_calib: #Compute the dz priors using simulations {{{
  .use_simulation_variables       #Use variable names relevant to the simulations 
  @sims_specz                    #Start with the calibration catalogues 
  construct_som                  #Construct a SOM for each calibration catalogue  
  !sim_som                       #Save the SOM(s) to sim_som
  @sims_specz_tomo                #Assign the tomographic sim specz sample as the calibrators 
  !som_weight_training            # ^^
  @sims_main_tomo                 #Assign the tomographic shear sample as the targets
  !som_weight_reference           # ^^
  @sim_som                        #Use the SOMs that we calculated above 
  replicate_ntomo                 #Replicate each SOM for the NTOMO tomographic bins 
  +NTHREADS=32                    #Use 32 threads because this is inefficient with more
  .compute_nz                     #Compute the nz 
  +NTHREADS=128                   #Use 24 threads because this is inefficient with more
  compute_dz_priors               #Compute the dz bias priors from the results 
  decorrelate_nzbias              #Compute the decorrelated Nz bias priors 
  %som_weight_refr_gold-sims_main_tomo_gold     #Save the main sim sample outputs to sims_main_tomo_gold 
  %som_weight_calib_cats-sims_specz_tomo_gold   #Save the sim calibration outputs to sims_specz_tomo_gold 
  %nz_hc_optim-nz_hc_optim_sims   #Save the Nz HC optimisation structures to nz_hc_optim_sims
  %nz-nz_sims                     #Save the Nz to nz_sims 
#}}}

.fiducial_m_calib: #Compute the m priors using simulations {{{
  @sims_main_tomo_gold                #Use the gold tomographic simulated main catalogues 
  .use_simulation_variables 
  .shape_recal                        #Recalibrate shapes to remove PSF leakage
  !sims_main_tomo_gold_recal          #Save the recalibrated gold tomographic simulated main catalogues 
  compute_m_surface                   #Compute an m_surface for each catalogue 
  !m_surface                          #Save surface(s) to m_surface 
  !m_surface_save                     #Save surface(s) to m_surface_save (in case i accidentally break them later...)
  +M1NAME=m1_raw                      #Use m1_raw (i.e. no higher order corrections)
  +M2NAME=m2_raw                      #Use m2_raw (i.e. no higher order corrections)
  .use_data_variables                 #Update variables for the data catalogues 
  @main_all_tomo_gold                 #Compute m for all sources in the main gold sample 
  .shape_recal                        #Recalibrate shapes to remove PSF leakage
  !main_all_tomo_gold_recal           #Save the recalibrated gold tomographic main catalogues 
  #+E1NAME=AlphaRecalD2_e1             #Use the recalibrated shapes (USE IF RERUNNING) 
  #+E2NAME=AlphaRecalD2_e2             #Use the recalibrated shapes (USE IF RERUNNING) 
  #@main_all_tomo_gold_recal           #Save the recalibrated gold tomographic main catalogues  (USE IF RERUNNING) 
  compute_m_bias                      #Compute m-bias values & uncertainties  
  make_m_covariance                   #Construct the m covariance matricies 
#}}}

.higher_m_calib: #Apply higher-order correction to m-calibration {{{
  add_higher_sims        #Add higher-order m-calibration catalogues 
  @m_surface             #Use the current m_surface
  higher_order_mcal      #Apply higher-order corrections to m_surface
  +M1NAME=m1_final       #Update variables to use corrected m1
  +M2NAME=m2_final       #Update variables to use corrected m2
  !m_surface             #Save the updated surface(s) to m_surface
#}}}

.fiducial_settings: #{{{
  +STATISTIC=cosebis          #Use COSEBIs
  +SAMPLER=multinest          #Use the multinest sampler 
  +BOLTZMAN=COSMOPOWER_HM2015 #Use COSMOPOWER with HMCODE2015 for the power spectrum 
  +COSMOSIS_PIPELINE="sample_S8 sigma8toAs correlated_dz_priors one_parameter_hmcode load_nz_fits cosmopower distances extrapolate_power source_photoz_bias linear_alignment projection cosebis scale_cuts likelihood"
  +NMAXCOSEBIS=5              #Use 5 COSEBIs modes, starting from 1
  +NMINCOSEBIS=1              #Use 5 COSEBIs modes, starting from 1
#}}}

.prepare_xipm: # Catalogue perparation for Xipm computation {{{
  @main_all_tomo_gold    #Reset to the Combined-patch tomographic gold catalogue
  extract_patch          #Extract the individual patches again (used for treecorr)
  !main_tomo_gold        #Save individual patch tomographic gold cats to block 
  correct_cterm          #Correct c-terms for individual patches & bins 
  !main_tomo_gold_cc     #Save results to data block 
  combine_patch          #Combine the c-corrected patches together 
  !main_all_tomo_gold_cc #Start with the combined-patch tomographic gold catalogue 
  neff_sigmae            #Compute the sigma_e and n_eff for the combined-patch samples
  prepare_treecorr       #Convert each DATAHEAD catalogue to treecorr's expected format 
  !tc_input              #Save treecorr inputs to datablock (not used, just for posterity) 
#}}}

.run_xipm: #Run xipm  {{{
  calc_xi_w_treecorr   #Calculate xipm with treecor for all files in the DATAHEAD (-> xipm)
  @xipm                #Set the treecorr xipm to the DATAHEAD 
  combine_xi_patches   #Combine the xipm values across the patches 
  !xipm_comb           #Save the combined xipms to the datablock 
#}}}

.prepare_cosebis: #{{{
  calculate_cosebis    #Compute cosebis from the xipm 
  .cosebis_covariance  #Compute cosebis covariance    

#Cosebis covariance: .cosebis_covariance {{{ 
.cosebis_covariance: 
  @xipm_comb                          #Use the combined xipm data vector
  add_ssc_matrix                      #Add the super-sample covariance matrix to the data-block 
  prepare_cosmosis                    #Construct input files needed by COSMOSIS
  %cosmosis_neff_NS-cosmosis_neff     #Use the combined Neff as fiducial 
  %cosmosis_sigmae_NS-cosmosis_sigmae #Use the combined sigma_e as fiducial 
  make_cosmosis_nz                    #Construct the cosmosis nz file 
  %cosmosis_nz_NS-cosmosis_nz         #Use the combined Nz as fiducial 
  prepare_covariance                  #Construct the folders needed by cosmosis 
  run_covariance_cosebis              #Compute the cosebis covariance with cosmosis 
#}}}

#}}}

.prepare_chain: #{{{
  make_data_vector        #Construct the combined data vector 
  %cosebis_vec_NS-cosebis_vec #Use the combined NS data vector as fiducial 
  save_and_check_mcmc_inp #Construct the cosmosis input fits file 
  cosmosis_constructor    #Construct the cosmosis .ini files 
#}}}

.postprocess_chain: #{{{
  +DVLENGTH=75
  +LIST_INPUT_SAMPLER=multinest
  +SAMPLER=list
  cosmosis_constructor
  run_chain
  plot_TPD                #Plot theory predictive distributions 
#}}}









# OTHER LOOPS: commented out for now {{{
#
#.prepare_main_northsouth: {{{
#  @main_cats          #Copy the main catalogues to the DATAHEAD
#  ldacrentab          #Rename TABLE to OBJECTS if needed 
#  gaapflag_selection  #Select the sources with GAAPFLAG 0 values
#  %main_cats-main_raw #rename the original cats block
#  !main_cats          #Copy these catalogues back to the main_cats 
#  tomography          #Apply tomography to DATAHEAD
#  !main_cats_tomo     #Save tomographic catalogues to data block 
#  #}}}
#
##Construct a SOM from main survey data: .main_som {{{
#.main_som: 
#  @main_all
#  construct_som 
#  !main_som 
##}}}
#
#.compute_nz_northsouth: # {{{
#  compute_nz_weights #Compute the SOM Nz weights 
#  construct_nz       #Make the Nz 
#  plot_HC_nz         #Make some diagnostic figures 
#  @som_weight_refr_cats
#  merge_goldclass    #Merge the goldclass information back
#  %som_weight_refr_gold-main_tomo_gold
##}}}
#
#.catalogue_prep_northsouth: #Catalogue perparation - from goldclasses to treecorr inputs: .catalogue_prep {{{
#  @main_tomo_gold
#  correct_cterm          #Correct c-terms for individual patches & bins 
#  !main_tomo_gold_cc     #Save results to data block 
#  neff_sigmae            #Compute the sigma_e and n_eff for the combined-patch samples
#  prepare_treecorr       #Prepare catalogues for treecorr 
#  !tc_input              #Save treecorr inputs to datablock 
##}}}
#
#.catalogue_prep_northsouth_one_nz:  #Catalogue perparation - from goldclasses to treecorr inputs: .catalogue_prep {{{
#  @main_all_tomo_gold    #Combined-patch tomographic gold catalogue
#  extract_patch          #Extract the individual patches again (used for treecorr)
#  !main_tomo_gold        #Save individual patch tomographic gold cats to block 
#  correct_cterm          #Correct c-terms for individual patches & bins 
#  !main_tomo_gold_cc     #Save results to data block 
#  @main_all_tomo_gold    #Reset to the Combined-patch tomographic gold catalogue 
#  correct_cterm          #Correct the combined-patch cterms 
#  !main_all_tomo_gold_cc #Save the results 
#  @main_tomo_gold_cc     #Reset to individual patch tomographic gold cats
#  neff_sigmae            #Compute the sigma_e and n_eff for the individual patches
#  prepare_treecorr       #Prepare catalogues for treecorr 
#  !tc_input              #Save treecorr inputs to datablock 
##}}}
#
#.run_xipm_northsouth: #Run xipm: .run_xipm {{{
#  calc_xi_w_treecorr   #Calculate xipm with treecor
#  @xipm                #Set the treecorr xipm to the DATAHEAD 
##}}}
#
##Cosebis covariance: .cosebis_covariance {{{ 
#.cosebis_covariance: 
#  @xipm_comb
#  add_ssc_matrix
#  .prepare_cosmosis
#  %cosmosis_nz_NS-cosmosis_nz #Rename cosmosis Nz block element to required block name 
#  %cosmosis_neff_NS-cosmosis_neff #Rename cosmosis neff block element to required block name 
#  %cosmosis_sigmae_NS-cosmosis_sigmae #Rename cosmosis sigmae block element to required block name 
#  make_cosmosis_nz 
#  prepare_covariance
#  run_covariance_cosebis
##}}}
#
#.use_north: # {{{
#  @cosmosis_neff_N
#  !cosmosis_neff
#  @cosmosis_sigmae_N
#  !cosmosis_sigmae
#  @cosmosis_xipm_N
#  !cosmosis_xipm
#  make_cosmosis_nz
#  @cosmosis_nz_N
#  !cosmosis_nz
##}}}
#
#.use_south: #{{{
#  @cosmosis_neff_S
#  !cosmosis_neff
#  @cosmosis_sigmae_S
#  !cosmosis_sigmae
#  @cosmosis_xipm_S
#  !cosmosis_xipm
#  make_cosmosis_nz
#  @cosmosis_nz_S
#  !cosmosis_nz
##}}}  
#
##useless? #{{{
#.use_northsouth_north:
#  @cosmosis_neff_N
#  !cosmosis_neff
#  @cosmosis_sigmae_N
#  !cosmosis_sigmae
#  @cosmosis_xipm_N
#  !cosmosis_xipm
#  make_cosmosis_nz
#  @cosmosis_nz_N
#  !cosmosis_nz
##}}}
#
#.use_northsouth_south: #{{{
#  @cosmosis_neff_S
#  !cosmosis_neff
#  @cosmosis_sigmae_S
#  !cosmosis_sigmae
#  @cosmosis_xipm_S
#  !cosmosis_xipm
#  make_cosmosis_nz
#  @cosmosis_nz_S
#  !cosmosis_nz
##}}}
#
#.save_and_check_mcmc_inp_north: #{{{
#  @cosmosis_neff_N
#  !cosmosis_neff
#  @cosmosis_sigmae_N
#  !cosmosis_sigmae
#  @cosebis_cov_N
#  !cosebis_cov
#  @cosebis_vec_N
#  !cosebis_vec
#  +NZPATCH=N
#  save_and_check_mcmc_inp
#  @mcmc_inp
#  !mcmc_inp_N
##}}}
#
#.save_and_check_mcmc_inp_south:#{{{
#  @cosmosis_neff_S
#  !cosmosis_neff
#  @cosmosis_sigmae_S
#  !cosmosis_sigmae
#  @cosebis_cov_S
#  !cosebis_cov
#  @cosebis_vec_S
#  !cosebis_vec
#  +NZPATCH=S
#  save_and_check_mcmc_inp
#  @mcmc_inp
#  !mcmc_inp_S
##}}}
#
#.cosebis_covariance_northsouth: #{{{
#  @xipm
#  add_ssc_matrix
#  .prepare_cosmosis
#  .use_north
#  prepare_covariance
#  +COSEBISBASE=XI_KiDS_1000_N
#  run_covariance_cosebis
#  %cosebis_cov-cosebis_cov_N
#  .use_south
#  prepare_covariance
#  +COSEBISBASE=XI_KiDS_1000_S
#  run_covariance_cosebis
#  %cosebis_cov-cosebis_cov_S
##}}}
#
#.cosebis_covariance_northsouth_one_nz: #{{{
#  @nz
#  duplicate_perpatch
#  !nz
#  @xipm
#  add_ssc_matrix
#  .prepare_cosmosis
#  .use_northsouth_north
#  prepare_covariance
#  +COSEBISBASE=XI_KiDS_1000_N
#  run_covariance_cosebis
#  %cosebis_cov-cosebis_cov_N
#  .use_northsouth_south
#  prepare_covariance
#  +COSEBISBASE=XI_KiDS_1000_S
#  run_covariance_cosebis
#  %cosebis_cov-cosebis_cov_S
##}}}
#
##Cosebis covariance: .load_cosebis_covariance {{{
#.load_cosebis_covariance: 
#  @xipm_comb
#  add_ssc_matrix
#  .prepare_cosmosis
#  %cosmosis_nz_NS-cosmosis_nz #Rename cosmosis Nz block element to required block name 
#  prepare_covariance
#  add_covariance_cosebis
##}}}
#
##Chains {{{
#
#.all_boltzman: # Run chains with all boltzman codes {{{
#  +COSMOSIS_PIPELINE="sample_S8 sigma8toAs correlated_dz_priors one_parameter_hmcode load_nz_fits cosmopower distances extrapolate_power source_photoz_bias linear_alignment projection cosebis scale_cuts likelihood"
#  +BOLTZMAN=COSMOPOWER_HM2015
#  cosmosis_constructor
#  run_chain
#  +BOLTZMAN=COSMOPOWER_HM2020
#  cosmosis_constructor
#  run_chain
#  +BOLTZMAN=COSMOPOWER_HM2015_S8
#  cosmosis_constructor
#  run_chain
#  +COSMOSIS_PIPELINE="sample_S8 sigma8toAs correlated_dz_priors one_parameter_hmcode load_nz_fits camb extrapolate_power source_photoz_bias linear_alignment projection cosebis scale_cuts likelihood"
#  +BOLTZMAN=CAMB_HM2015
#  cosmosis_constructor
#  run_chain
##}}}
#
#.all_chains_onestat: # Run all boltzman codes with all samplers {{{
#  +SAMPLER=multinest
#  .all_boltzman
#  +SAMPLER=polychord
#  .all_boltzman
#  +SAMPLER=nautilus 
#  .all_boltzman
#  +SAMPLER=apriori
#  .all_boltzman
##}}}
#
##Run all chains: stats, samplers, boltzman. Everything! all_chains {{{
#.all_chains:
#  +STATISTIC=xipm 
#  .all_chains_onestat
#  +STATISTIC=cosebis
#  .all_chains_onestat
#  +STATISTIC=bandpowers
#  .all_chains_onestat
##}}}
#
##}}}
#}}}
