#
# CosmoPipe Pipeline Configuration File 
# Pipelines should be configured as: 
#
# [name]: .[submode1] [standalone1] [standalone2] .[submode2] ...
# .[submode1]: [standalone3] [standalone4] .[submode3] ...
# 
# There are 3 special functions: 
# - @[name] sets the datablock entry [name] to the datahead 
# - ![name] sets the current datahead to the block item [name]
# - %[name1]-[name2] changes the datablock entry [name1] to [name2]
# - +[name]=[value] assigns variable [name] the [value] in the block variables
#

#Demo chain {{{
AsgariDemo: 
  add_neff               #Add n_effective to datablock 
  add_datavec            #Add existing datavector to block 
  add_covariance_cosebis #Add existing datavector to block 
  .prepare_cosmosis      #Prepare inputs for cosmosis 
  prepare_covariance     #Create correct covariance filename in block 
  add_covariance_cosebis #Add the existing covariance to the block 
  cosmosis_constructor   #Construct the cosmosis .ini files 
  run_chain              #Run the chain 
#}}}

# Pipeline Testing {{{
pipetest: 
  #add_sims_specz
  #add_sims_main
  #@sims_main
  #@sims_specz
  #+ZSPECNAME=redshift_input
  #+WEIGHTNAME=AlphaRecalC_weight
  #+NTHREADS=128
  #construct_som 
  #+NTHREADS=80
  #!sim_som 
  #@sims_specz
  #ldacrentab
  #tomography
  #!sims_specz_tomo
  #!som_weight_training
  #@sims_main
  #ldacrentab
  #tomography
  #!sims_main_tomo
  #!som_weight_reference
  #@sim_som
  #replicate_ntomo
  #!som
  +WEIGHTNAME=AlphaRecalC_weight
  +NTHREADS=128
  compute_nz_weights
#}}}

#Fiducial K1000 analysis pipeline: AsgariRerun {{{
AsgariRerun: 
  add_main             #Add the main catalogues to the data block 
  add_specz            #Add the specz calibration catalogue to the data block 
  .prepare_main        #Prepare the main survey catalogues 
  .prepare_specz       #Prepare the specz calibration catalogues 
  .specz_som           #Compute a SOM using the calibration catalogue 
  .compute_nz          #Compute Nz from the SOM & main+specz data 
  .catalogue_prep      #Prepare the catalogues for correlation functions 
  .run_xipm            #Compute xipm using treecorr
  @xipm_comb           #Save the combined xipms to the datablock 
  calculate_cosebis    #Compute cosebis from the xipm 
  .cosebis_covariance  #Compute cosebis covariance    
  cosmosis_constructor #Construct the cosmosis .ini files 
  run_chain            #Run the chain 
 
  +SAMPLER=polychord
  cosmosis_constructor
  run_chain
  +DVLENGTH=75
  +LIST_INPUT_SAMPLER=polychord
  +SAMPLER=list
  cosmosis_constructor
  run_chain
  plot_TPD

  #@main_all_tomo_gold_cc #Save the results 
  #neff_sigmae            #Compute the sigma_e and n_eff for the combined-patch samples
  #.load_cosebis_covariance #Compute cosebis covariance    
  #.cosebis_chain      #Compute the chain with COSEBIs & cosmosis
  #@main_all_tomo_gold_cc
  #add_neff #Compute cosebis covariance    
  #.cosebis_covariance #Compute cosebis covariance    
  #.cosebis_chain      #Compute the chain with COSEBIs & cosmosis

  #@main_all_tomo_gold_cc #Save the results 
  #neff_sigmae            #Compute the sigma_e and n_eff for the combined-patch samples
  #@xipm_comb           #Save the combined xipms to the datablock 
  #calculate_cosebis   #Compute cosebis from the xipm 
  #.cosebis_covariance #Compute cosebis covariance    
  #.cosebis_chain_cp20_poly    #Compute the chain with COSEBIs & cosmosis

#}}}

#Catalogues to Data Vectors {{{

#Prepare main survey catalogues: .prepare_main {{{
.prepare_main: 
  @main_cats          #Copy the main catalogues to the DATAHEAD
  ldacrentab          #Rename TABLE to OBJECTS if needed 
  gaapflag_selection  #Select the sources with GAAPFLAG 0 values
  %main_cats-main_raw #rename the original cats block
  !main_cats          #Copy these catalogues back to the main_cats 
  tomography          #Apply tomography to DATAHEAD
  !main_cats_tomo     #Save tomographic catalogues to data block 
  combine_patch       #Combine the patches into a single catalogue
  @main_all           #
  tomography          #
  !main_all_tomo      #Copy the DATAHEAD to main_all_tomo 
  #}}}

#Prepare calibration catalogues: .prepare_specz {{{
.prepare_specz: 
  @specz_cat         #Copy the specz catalogue to the DATAHEAD 
  ldacrentab         #Rename TABLE to OBJECTS if needed 
  use_adapt_mag      #Convert the magnitudes to adapted magnitudes 
  !specz_adapt       #Save the specz adapt catalogue to data block 
  tomography         #Apply tomography to DATAHEAD
  !specz_adapt_tomo  #Save specz adapt tomographic catalogue to data block 
  #}}}

#Construct a SOM from calibration data: .specz_som {{{
.specz_som: 
  @specz_adapt
  construct_som 
  !specz_som 
#}}}

#Construct a SOM from main survey data: .main_som {{{
.main_som: 
  @main_all
  construct_som 
  !main_som 
#}}}

#Compute an Nz given the current SOM: .compute_nz {{{
.compute_nz: 
  compute_nz_weights #Compute the SOM Nz weights 
  construct_nz       #Make the Nz 
  plot_HC_nz         #Make some diagnostic figures 
  merge_goldclass    #Merge the goldclass information back
#}}}

#Catalogue perparation - from goldclasses to treecorr inputs: .catalogue_prep {{{
.catalogue_prep: 
  @main_all_tomo_gold    #Combined-patch tomographic gold catalogue
  extract_patch          #Extract the individual patches again (used for treecorr)
  !main_tomo_gold        #Save individual patch tomographic gold cats to block 
  correct_cterm          #Correct c-terms for inidividual patches & bins 
  !main_tomo_gold_cc     #Save results to data block 
  @main_all_tomo_gold    #Reset to the Combined-patch tomographic gold catalogue 
  correct_cterm          #Correct the combined-patch cterms 
  !main_all_tomo_gold_cc #Save the results 
  neff_sigmae            #Compute the sigma_e and n_eff for the combined-patch samples
  @main_tomo_gold_cc     #Reset the head to the patchwise tomographic gold ccorr cats
  prepare_treecorr       #Prepare catalogues for treecorr 
  !tc_input              #Save treecorr inputs to datablock 
#}}}

#Run xipm: .run_xipm {{{
.run_xipm: 
  calc_xi_w_treecorr   #Calculate xipm with treecor
  @xipm                #Set the treecorr xipm to the DATAHEAD 
  combine_xi_patches   #Combine the xipm values across the patches 
  !xipm_comb           #Save the combined xipms to the datablock 
#}}}

#Cosebis covariance: .cosebis_covariance {{{ 
.cosebis_covariance: 
  @xipm_comb
  .prepare_cosmosis
  prepare_covariance
  run_covariance_cosebis
#}}}

#Cosebis covariance: .load_cosebis_covariance {{{
.load_cosebis_covariance: 
  @xipm_comb
  .prepare_cosmosis
  prepare_covariance
  add_covariance_cosebis
#}}}

#Prepare for using Cosmosis: .prepare_cosmosis {{{
.prepare_cosmosis:
  add_nzcov
  add_nzbias
  add_ssc_matrix
  add_mbias
  decorrelate_nzbias
  make_m_covariance 
  prepare_cosmosis
  make_cosmosis_nz 
#}}}

#}}}

#Chains {{{

#Prepare & Run a chain using the cosmosis constructor: .prep_and_chain {{{
.prep_and_chain: 
  make_data_vector
  save_and_check_mcmc_inp
  cosmosis_constructor
  run_chain
#}}}

#Run chains with all boltzman codes: .all_boltzman {{{
.all_boltzman: 
  +BOLTZMAN=COSMOPOWER_HM2015
  +COSMOSIS_PIPELINE="sample_S8 sigma8toAs correlated_dz_priors one_parameter_hmcode load_nz_fits cosmopower distances extrapolate_power source_photoz_bias linear_alignment projection cosebis scale_cuts likelihood"
  cosmosis_constructor
  run_chain
  +BOLTZMAN=COSMOPOWER_HM2020
  cosmosis_constructor
  run_chain
  +BOLTZMAN=COSMOPOWER_HM2015_S8
  cosmosis_constructor
  run_chain
  #+BOLTZMAN=CAMB_HM2015
  #+COSMOSIS_PIPELINE="sample_S8 sigma8toAs correlated_dz_priors one_parameter_hmcode load_nz_fits camb extrapolate_power source_photoz_bias linear_alignment projection cosebis scale_cuts likelihood"
  #cosmosis_constructor
  #run_chain
#}}}

#Run all boltzman codes with all samplers: all_chains_onestat {{{
.all_chains_onestat:
  +SAMPLER=multinest
  .all_boltzman
  +SAMPLER=polychord
  .all_boltzman
  +SAMPLER=apriori
  .all_boltzman
#}}}

#Run all chains: stats, samplers, boltzman. Everything! all_chains {{{
.all_chains:
  +STATISTIC=xipm 
  .all_chains_onestat
  +STATISTIC=cosebis
  .all_chains_onestat
  +STATISTIC=bandpowers
  .all_chains_onestat
#}}}

#For running hard coded ini files: {{{ 

#Run the cosebis chain: .cosebis_chain {{{
.cosebis_chain: 
  make_data_vector
  save_and_check_mcmc_inp
  run_chain_cosebis
#}}}

#Run the cosebis chain with cosmopower: .cosebis_chain_cp {{{
.cosebis_chain_cp: 
  make_data_vector
  save_and_check_mcmc_inp
  run_chain_cosebis_cp
#}}}

#Run the cosebis chain with cosmopower and polychord: .cosebis_chain_cp_poly {{{
.cosebis_chain_cp_poly:
  make_data_vector
  save_and_check_mcmc_inp
  run_chain_cosebis_cp_poly
#}}}

#Run the cosebis chain with cosmopower and polychord & hmcode2020: .cosebis_chain_cp20_poly {{{
.cosebis_chain_cp20_poly: 
  make_data_vector
  save_and_check_mcmc_inp
  run_chain_cosebis_cp20_poly
#}}}

#}}}

#}}}

